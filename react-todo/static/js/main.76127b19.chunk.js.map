{"version":3,"sources":["mock.js","components/InputArea.jsx","components/Task.jsx","components/TasksArea.jsx","components/AssistantArea.jsx","App.js","serviceWorker.js","index.js"],"names":["id","uniqid","title","text","isCompleted","InputArea","props","useState","setTitle","setText","createTask","className","onChange","e","target","value","type","placeholder","name","cols","rows","onClick","trim","completed","alert","Task","index","removeTask","editTask","ListArea","tasks","tasksList","map","task","CSSTransition","timeout","classNames","key","TransitionGroup","component","AssistantArea","completedTasks","filter","percent","length","isNaN","toFixed","App","state","mockData","newTasks","splice","setState","data","this","tasksProps","inputProps","TasksArea","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.76127b19.chunk.js","sourcesContent":["import uniqid from 'uniqid';\n\nexport default [\n    {\n        id: uniqid(),\n        title: 'Task 1',\n        text: 'Lorem ipsum dolor sit amet, eum sumo verear scripserit te, eu sed quas quando ornatus. Ridens argumentum pro no, nostrud scribentur mel ut.',\n        isCompleted: false\n    },\n    {\n        id: uniqid(),\n        title: 'Task 2',\n        text: 'Lorem ipsum dolor sit amet, eum sumo verear scripserit te, eu sed quas quando ornatus. Ridens argumentum pro no, nostrud scribentur mel ut.',\n        isCompleted: false\n    },\n    {\n        id: uniqid(),\n        title: 'Task 3',\n        text: 'Lorem ipsum dolor sit amet, eum sumo verear scripserit te, eu sed quas quando ornatus. Ridens argumentum pro no, nostrud scribentur mel ut.',\n        isCompleted: true\n    }\n]","import React, { useState } from 'react';\nimport uniqid from 'uniqid';\n\nfunction InputArea(props) {\n\n    const [title, setTitle] = useState('');\n    const [text, setText] = useState('');\n\n    const { createTask } = props;\n\n    const click = () => {\n\n        if (title.trim() === '' || text.trim() === '') {\n            alert('Entered title or text is wrong');\n            return\n        }\n\n        createTask({\n            id: uniqid(),\n            title: title,\n            text: text,\n            completed: false\n        });\n    }\n\n    function onTitleChange(e) {\n        setTitle(e.target.value)\n    }\n\n    function onTextChange(e) {\n        setText(e.target.value)\n    }\n\n    return (\n\n        <div className=\"col input\">\n\n            <h2 className=\"col__title\">Enter your task here:</h2>\n\n            <input onChange={onTitleChange} className=\"input__task-title\" type=\"text\" placeholder=\"Enter Title...\"/>\n\n            <textarea onChange={onTextChange} className=\"input__task-text\" name=\"\" id=\"\" cols=\"30\" rows=\"10\" placeholder=\"Enter text...\"></textarea>\n\n            <button onClick={click} className=\"btn input__add-btn\"><i className=\"fas fa-plus\"></i></button>\n\n        </div>\n    );\n}\n\nexport default InputArea;","import React from 'react';\n\nfunction Task(props) {\n\n    const { index, title, text, isCompleted, removeTask, editTask } = props;\n\n    function remove() {\n        removeTask(index);\n    }\n\n    function comletedToggle() {\n        editTask(index, {\n            isCompleted: !isCompleted\n        });\n    }\n\n    return (\n        <div className=\"task\">\n\n            <div className={isCompleted ? \"task__wrapper done\" : \"task__wrapper\"}>\n\n                <h3 className=\"task__title\">{title}</h3>\n\n                <p className=\"task__text\">\n                    {text}\n                </p>\n\n                <div className=\"task__controls\">\n                    <button onClick={comletedToggle} className=\"btn task__done-btn\"><i className=\"fas fa-check\"></i></button>\n                    {/* <button className=\"btn task__open-btn\"><i className=\"fas fa-expand\"></i></button> */}\n                    <button onClick={remove} className=\"btn task__remove-btn\"><i className=\"far fa-trash-alt\"></i></button>\n                </div>\n                \n            </div>\n\n        </div>\n    );\n}\n\nexport default Task;","import React from 'react';\nimport Task from './Task';\n\nimport {\n    CSSTransition,\n    TransitionGroup,\n} from 'react-transition-group';\n\nfunction ListArea(props) {\n\n    const { tasks = [], removeTask, editTask } = props;\n\n    const tasksList = tasks.map((task, index) =>\n        <CSSTransition\n            timeout={1000}\n            classNames=\"fade\"\n            key={task.id}\n        >\n            <Task {...{...task, removeTask, editTask, index}}/>\n        </CSSTransition>\n    );\n\n    return (\n        <div className=\"col tasks\">\n            <h2 className=\"col__title\">Your Tasks:</h2>\n            <TransitionGroup component=\"div\">\n                {tasksList}\n            </TransitionGroup>\n        </div>\n    );\n}\n\nexport default ListArea;","import React from 'react';\n\nfunction AssistantArea(props) {\n\n    const { tasks } = props;\n\n    const completedTasks = tasks.filter(task => task.isCompleted);\n\n    let percent = completedTasks.length * 100 / tasks.length;\n\n    if (isNaN(percent)) percent = 0;\n\n    return (\n        <div className=\"col assistant\">\n            <h1 className=\"assistant__percent\">{percent.toFixed(2)}%</h1>\n\n            <p className=\"assistant__done\">Done: {completedTasks.length}</p>\n            <p className=\"assistant__in-work\">In progress: {tasks.length - completedTasks.length}</p>\n        </div>\n    );\n}\n\nexport default AssistantArea;","import React, { Component } from 'react';\nimport mockData from './mock';\n\n// my components\nimport InputArea from './components/InputArea';\nimport TasksArea from './components/TasksArea';\nimport AssistantArea from './components/AssistantArea';\n\nclass App extends Component {\n\n  state = {\n    tasks: mockData\n  }\n\n  removeTask = index => {\n\n    const newTasks = [...this.state.tasks];\n    newTasks.splice(index, 1);\n\n    this.setState({\n      tasks: newTasks\n    });\n  }\n\n  createTask = task => {\n    this.setState({\n      tasks: [task, ...this.state.tasks]\n    });\n  }\n\n  editTask = (index, data) => {\n    const newTasks = [...this.state.tasks];\n    newTasks[index] = { ...newTasks[index], ...data }\n\n    this.setState({\n      tasks: newTasks \n    });\n  }\n\n  render() {\n\n    const { tasks } = this.state;\n\n    const tasksProps = {\n      tasks,\n      removeTask: this.removeTask,\n      editTask: this.editTask\n    }\n\n    const inputProps = {\n      createTask: this.createTask\n    }\n\n    return (\n      <div className=\"col app\">\n\n          <h1 className=\"app__title\">React ToDo</h1>\n\n          <div className=\"row wrapper\">\n            <InputArea {...inputProps}/>\n            <TasksArea {...tasksProps}/>\n            <AssistantArea tasks={tasks}/>\n          </div>\n\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}