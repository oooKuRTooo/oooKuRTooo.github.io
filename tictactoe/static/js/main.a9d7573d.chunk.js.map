{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["emptyField","App","state","field","isPlayerOne","winner","winFinder","index","setState","clickHandler","row","col","newField","reset","i","j","render","className","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a9d7573d.chunk.js","sourcesContent":["import React from 'react';\n\nconst emptyField = [\n  [null, null, null],\n  [null, null, null],\n  [null, null, null],\n]\n\nclass App extends React.Component {\n\n  state = {\n    field: emptyField,\n    isPlayerOne: true,\n    winner: null\n  }\n\n  winFinder = field => {\n    for (let index = 0; index < 3; index++) {\n      if (field[index][0] === field[index][1] && field[index][1] === field[index][2] && field[index][1] !== null) {\n        const winner = field[index][1];\n        field[index][0] = 'ðŸ˜Ž';\n        field[index][1] = 'ðŸ˜Ž';\n        field[index][2] = 'ðŸ˜Ž';\n        return this.setState({ winner, field });\n      }\n    }\n    for (let index = 0; index < 3; index++) {\n      if (field[0][index] === field[1][index] && field[1][index] === field[2][index] && field[1][index] !== null) {\n        const winner = field[1][index];\n        field[0][index] = 'ðŸ˜Ž';\n        field[1][index] = 'ðŸ˜Ž';\n        field[2][index] = 'ðŸ˜Ž';\n        return this.setState({ winner, field });\n      }\n    }\n    if (field[0][0] === field[1][1] && field[1][1] === field[2][2] && field[1][1] !== null) {\n      const winner = field[1][1];\n      field[0][0] = 'ðŸ˜Ž';\n      field[1][1] = 'ðŸ˜Ž';\n      field[2][2] = 'ðŸ˜Ž';\n      return this.setState({ winner, field });\n    };\n    if (field[0][2] === field[1][1] && field[1][1] === field[2][0] && field[1][1] !== null) {\n      const winner = field[1][1];\n      field[0][2] = 'ðŸ˜Ž';\n      field[1][1] = 'ðŸ˜Ž';\n      field[2][0] = 'ðŸ˜Ž';\n      return this.setState({ winner, field });\n    };\n  }\n\n  clickHandler = (row, col) => {\n\n    const { field, isPlayerOne } = this.state;\n\n    if (field[row][col] !== null) return;\n\n    const newField = [...field];\n\n    newField[row][col] = isPlayerOne ? 'x' : 'o';\n\n    this.setState({\n      field: newField,\n      isPlayerOne: !isPlayerOne\n    });\n\n    this.winFinder(newField);\n  }\n\n  reset = () => {\n\n    const { field, isPlayerOne } = this.state;\n    const newField = [...field];\n\n    this.setState({\n      isPlayerOne: true,\n      winner: null\n    });\n\n    for (var i = 0; i<3; i++) {\n      for (var j = 0; j<3; j++) {\n        newField[i][j] = null;\n      }\n    }\n\n    this.setState({\n      field: newField\n    });\n  }\n\n  render = () => {\n\n    const { field, isPlayerOne, winner } = this.state;\n\n    return (\n      <div className=\"App\">\n        {\n          winner !== null ?\n            <div className='result'>Winner: {winner}!</div>\n            :\n            <div className='player'>Player: {isPlayerOne ? 'x' : 'o'}</div>\n        }\n        <table>\n          <tbody>\n          <tr>\n            <td onClick={()=>this.clickHandler(0, 0)}>{field[0][0]}</td>\n            <td onClick={()=>this.clickHandler(0, 1)}>{field[0][1]}</td>\n            <td onClick={()=>this.clickHandler(0, 2)}>{field[0][2]}</td>\n          </tr>\n          <tr>\n            <td onClick={()=>this.clickHandler(1, 0)}>{field[1][0]}</td>\n            <td onClick={()=>this.clickHandler(1, 1)}>{field[1][1]}</td>\n            <td onClick={()=>this.clickHandler(1, 2)}>{field[1][2]}</td>\n          </tr>\n          <tr>\n            <td onClick={()=>this.clickHandler(2, 0)}>{field[2][0]}</td>\n            <td onClick={()=>this.clickHandler(2, 1)}>{field[2][1]}</td>\n            <td onClick={()=>this.clickHandler(2, 2)}>{field[2][2]}</td>\n          </tr>\n          </tbody>\n        </table>\n        <button onClick={this.reset}>RESET</button>\n      </div>\n    );\n\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}